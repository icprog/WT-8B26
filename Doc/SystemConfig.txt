//--------------------------------------------------------------------
// 硬件中断优先级设置                                               //
// NVIC_PRIORITYGROUP_4 (0-15)                                      //
//--------------------------------------------------------------------

// IRQ = 0_H
HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);

// IRQ = 3
HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0); 

// IRQ = 5-6
HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 6, 0);
HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 6, 0);
HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);


// IRQ = 10
HAL_NVIC_SetPriority(WT_UART_IRQ[IndexUart], 10, 1);

// IRQ = 14
HAL_NVIC_SetPriority(FM24C64_I2C_EV_IRQn, 14, 0);
HAL_NVIC_SetPriority(FM24C64_I2C_ER_IRQn, 14, 0);

// IRQ = 15_L
HAL_NVIC_SetPriority(LTDC_IRQn, 0xF, 0);
HAL_NVIC_SetPriority(SysTick_IRQn, 15 ,0);	//
HAL_NVIC_SetPriority((IRQn_Type)(KEYWHEEL_1_INT_EXTI), 15, 0x00);
HAL_NVIC_SetPriority((IRQn_Type)(KEYWHEEL_2_INT_EXTI), 15, 0x00);
HAL_NVIC_SetPriority((IRQn_Type)(EXTI15_10_IRQn), 15, 0x00);
HAL_NVIC_SetPriority((IRQn_Type)(USBOTG_POWER_OC_INT_EXTI), 15, 0x00);



//--------------------------------------------------------------------
// 任务优先级设置                                                   //
// HAL_NVIC_SetPriority                                             //
//--------------------------------------------------------------------
// osPriorityHigh
osThreadDef(Kernel_Thread, StartThread, osPriorityHigh, 0, 2 * configMINIMAL_STACK_SIZE);

// osPriorityAboveNormal
osThreadDef(UART_COM1_Thread, UARTCOM1Thread, osPriorityAboveNormal, 0, 2 * configMINIMAL_STACK_SIZE);	//15
osThreadDef(UART_Audio_Thread, UARTAudioThread, osPriorityAboveNormal, 0, 2 * configMINIMAL_STACK_SIZE);	//15

// osPriorityNormal
osThreadDef(USBH_Thread, USBH_Process_OS, osPriorityNormal, 0, USBH_PROCESS_STACK_SIZE);
osThreadDef(GUI_Thread, GUIThread, osPriorityNormal, 0, 8 * configMINIMAL_STACK_SIZE);	//15
osThreadDef(WireTest_Thread, WIRETESTThread, osPriorityNormal, 0, 5 * configMINIMAL_STACK_SIZE);	//15
osThreadDef(WireStudy_Thread, WIRESTUDYThread, osPriorityNormal, 0, 5 * configMINIMAL_STACK_SIZE);	//15
osThreadDef(WireSelfCheck_Thread, WIRESELFCHECKThread, osPriorityNormal, 0, 2 * configMINIMAL_STACK_SIZE);	//15
osThreadDef(WireFindPoint_Thread, WIREFINDPOINTThread, osPriorityNormal, 0, 2 * configMINIMAL_STACK_SIZE);	//15

// osPriorityBelowNormal
osThreadDef(STORAGE_Thread, StorageThread, osPriorityBelowNormal, 0, 2 * configMINIMAL_STACK_SIZE);

// osPriorityLow
osThreadDef(KEY_LED_Thread, TimerCallback, osPriorityLow, 0, 2 * configMINIMAL_STACK_SIZE);	//15



